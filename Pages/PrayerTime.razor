@using PrayerTimes.Services
@inject LocationService LocationService
@inject PrayerTimeService PrayerTimeService

@page "/"

<MudContainer Style="background-image: url('https://i.pinimg.com/736x/49/f4/66/49f46625ecf34d3f7071374d9bdb8007.jpg'); 
                     background-size: cover; 
                     background-repeat: no-repeat; 
                     background-position: center; 
                     height: 100vh;
                     display: flex;
                     flex-direction: column;
                     justify-content: flex-start;
                     align-items: center;
                     padding-top: 20px;">
    @if(timesdict is not null)
    {
        @foreach (var item in timesdict)
        {
            bool isTimeClose = (item.Key == nextPrayerKey);
            <MudCard Class="my-2" 
                     Style="@GetCardStyle(isTimeClose)">
                <MudCardContent Style="display: flex; align-items: center; justify-content: space-between; height: 100%;">
                    <MudText Typo="Typo.h5" Style="margin: 0;">@item.Key</MudText>
                    <MudText Typo="Typo.h5" Style="margin: 0;">@item.Value</MudText>
                </MudCardContent>
            </MudCard>
        }
    }
    <MudCard Class="my-2" 
        Style="background-color: rgb(250, 242, 2);
               color: rgb(0, 0, 0); 
               padding: 10px; 
               border-radius: 8px; 
               height: 15vh; 
               width: 100%; 
               position: absolute; 
               bottom: 60px; 
               left: 0; 
               box-shadow: 0px -2px 10px rgba(0, 0, 0, 0.5);">
        <MudCardContent Style="display: flex; flex-direction: column; justify-content: center; align-items: center; height: 120%;">
            <MudText Typo="Typo.h4" Style="font-family: 'Roboto', sans-serif; font-weight: bold;">
                Keyingi namoz: @nextPrayerKey
            </MudText>
            <MudText Typo="Typo.h6" Align="Align.Center" 
                     Style="font-family: 'Roboto', sans-serif; text-align: center; font-weight: bold;">
                @nextPrayerCountdown dan keyin
            </MudText>
            <MudText Typo="Typo.h6" Align="Align.Center" 
                     Style="font-family: 'Roboto', sans-serif; text-align: center; font-weight: bold;">
                Hozirgi vaqt: @currentTime
            </MudText>
        </MudCardContent>
    </MudCard>

    <MudButton Variant="Variant.Filled" 
               EndIcon="@Icons.Material.Filled.Send" 
               Color="Color.Info"
               Href="https://t.me/damyr_embergenoff"
               Target="_blank"
               Style="position: fixed; bottom: 20px; right: 20px; z-index: 1000; background-color: #00B8D4; color: white;">
        Send
    </MudButton>
</MudContainer>

@code {
    private PrayerTimeService.PrayerTimes? _prayerTimes;
    private Dictionary<string, string>? timesdict;
    private Dictionary<string, DateTime>? prayerTimesDict;
    private string currentTime = DateTime.Now.ToString("HH:mm:ss");
    private Timer? timer;
    private string? nextPrayerKey;
    private string nextPrayerCountdown = "";

    private string GetCardStyle(bool isTimeClose)
    {
        var backgroundColor = isTimeClose ? "#167803" : "rgba(0, 0, 0, 0.7)";
        return $"background-color: {backgroundColor}; color: white; padding: 10px; border-radius: 8px; width: 97%; margin: 0 auto; height: 8vh;";
    }

    protected override async Task OnInitializedAsync()
    {
        await GetPrayerTimes();
        StartTimer();
    }

    private async Task GetPrayerTimes()
    {
        try
        {
            var (latitude, longitude) = await LocationService.GetUserLocationAsync();
            _prayerTimes = await PrayerTimeService.GetPrayerTimesAsync(latitude, longitude);

            prayerTimesDict = new Dictionary<string, DateTime>
            {
                { "Fajr", DateTime.Parse(_prayerTimes?.Fajr!) },
                { "Sunrise", DateTime.Parse(_prayerTimes?.Sunrise!) },
                { "Dhuhr", DateTime.Parse(_prayerTimes?.Dhuhr!) },
                { "Asr", DateTime.Parse(_prayerTimes?.Asr!) },
                { "Maghrib", DateTime.Parse(_prayerTimes?.Maghrib!) },
                { "Isha", DateTime.Parse(_prayerTimes?.Isha!) },
            };

            timesdict = prayerTimesDict.ToDictionary(kvp => kvp.Key, kvp => kvp.Value.ToString("HH:mm"));

            UpdateNextPrayerTime();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Xatolik: " + ex.Message);
        }
    }

    private void UpdateNextPrayerTime()
    {
        if (prayerTimesDict == null)
            return;

        var now = DateTime.Now;
        string[] prayerOrder = { "Fajr", "Sunrise", "Dhuhr", "Asr", "Maghrib", "Isha" };

        nextPrayerKey = null;
        DateTime nextTime = DateTime.MinValue;

        foreach (var prayer in prayerOrder)
        {
            if (prayerTimesDict.TryGetValue(prayer, out var prayerTime) && prayerTime > now)
            {
                nextPrayerKey = prayer;
                nextTime = prayerTime;
                break;
            }
        }

        if (nextPrayerKey == null)
        {
            nextPrayerKey = "Fajr";
            nextTime = prayerTimesDict["Fajr"].AddDays(1);
        }

        TimeSpan diff = nextTime - now;
        nextPrayerCountdown = $"{diff.Hours} soat {diff.Minutes} daqiqa";
    }

    private void StartTimer()
    {
        timer = new Timer(UpdateCurrentTime, null, 0, 1000);
    }

    private void UpdateCurrentTime(object? state)
    {
        var now = DateTime.Now;
        currentTime = now.ToString("HH:mm:ss");
        UpdateNextPrayerTime();
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        timer?.Dispose();
    }
}
